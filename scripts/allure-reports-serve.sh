#!/usr/bin/env bash
#
# QABase – Allure Reports: Generate & Serve (All Modules)
#
# Purpose
#   Runs tests for qabase-core, qabase-rest, qabase-web-ui, generates an aggregated Allure HTML report,
#   and starts a temporary local server to view it.
#
# Prerequisites
#   - Java (JDK/JRE) available on PATH           → check: `java -version`
#   - Maven available on PATH                    → check: `mvn -v`
#   - Allure CLI installed                       → check: `allure --version`
#       • macOS:  `brew install allure`
#       • Linux:  `brew install allure` (Linuxbrew) or download ZIP from GitHub releases
#       • Win:    `choco install allurecommandline` or `scoop install allure`
#     (We do NOT use the Maven Allure plugin in this script.)
#
# What it does
#   1) Builds & runs tests for all three modules (unit + integration tests).
#   2) Validates that each module produced Allure results under target/allure-results.
#   3) Generates a single aggregated Allure HTML report at: target/allure-reports-aggregate (Allure CLI).
#   4) Starts `allure serve` over all modules’ results (temporary local web server).
#
# Usage
#   $ ./scripts/allure-reports-serve.sh
#
#   Options:
#     -h | --help     Show this help and exit
#
# Outputs (per module)
#   qabase-*/target/allure-results/    → raw JSON + attachments from tests
#   qabase-*/target/allure-reports/    → per-module HTML report (generated by Maven, if bound)
#
# Aggregated output
#   target/allure-reports-aggregate/   → combined HTML site for all modules
#   Open target/allure-reports-aggregate/index.html directly, or rely on `allure serve` output.
#
# Notes
#   - 'allure serve' starts a temporary local server. Close with Ctrl+C.
#   - If a module has no results, it’s skipped in the aggregation (the script warns you).
#   - CI tip: you can call `allure generate ... -o target/allure-reports-aggregate` and upload that folder.
#
set -Eeuo pipefail

show_help() {
  sed -n '2,80p' "$0"
}

if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
  show_help
  exit 0
fi

# === Settings ===
MODULES=(qabase-core qabase-rest qabase-web-ui)
RESULTS_DIRS=(
  "qabase-core/target/allure-results"
  "qabase-rest/target/allure-results"
  "qabase-web-ui/target/allure-results"
)
AGG_OUT="target/allure-reports-aggregate"  # (generated by Allure CLI)

# === Helpers ===
log() { printf "\033[1;34m[allure]\033[0m %s\n" "$*"; }
die() { printf "\033[1;31m[allure]\033[0m %s\n" "$*" >&2; exit 1; }

# === Preconditions ===
command -v mvn >/dev/null 2>&1 || die "Maven not found on PATH."
command -v allure >/dev/null 2>&1 || die "Allure CLI not found on PATH. Install it (brew/choco/scoop or ZIP)."

# Move to repo root (directory of this script)
ALLURE_REPORTS_SERVER_SCRIPT_PATH="$(dirname "${BASH_SOURCE[0]}")"
QABASE_ROOT_PATH="$(dirname "${ALLURE_REPORTS_SERVER_SCRIPT_PATH}")"
cd "${QABASE_ROOT_PATH}"
pwd

# === 1) Build & run tests (produces allure-results in each module) ===
log "Running tests for modules: ${MODULES[*]} ..."
mvn -pl "$(IFS=,; echo "${MODULES[*]}")" -am clean verify

# === 2) Sanity-check results ===
missing=0
for d in "${RESULTS_DIRS[@]}"; do
  if [[ ! -d "$d" ]] || ! compgen -G "$d/*.json" >/dev/null; then
    log "No Allure results found in: $d"
    missing=$((missing+1))
  else
    log "Found results in: $d"
  fi
done

(( missing == 3 )) && die "No allure results found in any module. Did tests produce results?"

# === 3) Generate aggregated static report with Allure CLI ===
log "Generating aggregated HTML report via Allure CLI → ${AGG_OUT}"
# Build the list of existing result directories (only those that have JSON files)
existing_dirs=()
for d in "${RESULTS_DIRS[@]}"; do
  if [[ -d "$d" ]] && compgen -G "$d/*.json" >/dev/null; then
    existing_dirs+=("$d")
  fi
done

if [[ ${#existing_dirs[@]} -eq 0 ]]; then
  die "No allure-results found to aggregate."
fi

rm -rf "${AGG_OUT}" || true
allure generate "${existing_dirs[@]}" --clean -o "${AGG_OUT}"
log "Aggregate report ready: ${AGG_OUT}/index.html"

# === 4) Serve all modules' results with a temporary server ===
log "Starting Allure CLI server (builds to a temp dir). Press Ctrl+C to stop."
allure serve "${existing_dirs[@]}"