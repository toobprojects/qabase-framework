<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.github.toobprojects</groupId>
    <artifactId>qabase-framework</artifactId>
    <version>1.4.1</version>
    <packaging>pom</packaging>
    <name>QABase Framework [POM]</name>
    <description>
        QABase is a lightweight, modular JVM automation testing framework (JUnit 5 + Allure, RestAssured, Selenide) for
        rapid, standardized QA setups.
    </description>
    <url>https://github.com/toobprojects/qabase-framework</url>

    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <url>https://www.apache.org/licenses/LICENSE-2.0</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <scm>
        <url>https://github.com/toobprojects/qabase-framework</url>
        <connection>scm:git:https://github.com/toobprojects/qabase-framework.git</connection>
        <developerConnection>scm:git:ssh://git@github.com/toobprojects/qabase-framework.git</developerConnection>
        <tag>HEAD</tag>
    </scm>

    <developers>
        <developer>
            <id>thabo</id>
            <name>Thabo Matjuda</name>
            <url>https://github.com/toobprojects</url>
        </developer>
    </developers>

    <modules>
        <module>qabase-core</module>
        <module>qabase-rest</module>
        <module>qabase-web-ui</module>
    </modules>


    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <java.version>17</java.version>
        <kotlin.version>2.1.20</kotlin.version>
        <kotlin.jvm.target>${java.version}</kotlin.jvm.target>
        <kotlin.language.version>2.0</kotlin.language.version>
        <kotlin.api.version>2.0</kotlin.api.version>
        <kotlin.freeCompilerArgs>
            -Xjsr305=strict -Xjvm-default=all -Xassertions=jvm -progressive
        </kotlin.freeCompilerArgs>

        <!-- JUnit Platform defaults -->
        <junit.version>5.13.4</junit.version>
        <qabase.junit.parallel.enabled>false</qabase.junit.parallel.enabled>
        <qabase.junit.lifecycle>per_class</qabase.junit.lifecycle>
        <qabase.junit.extensions.autodetection.enabled>true</qabase.junit.extensions.autodetection.enabled>


        <spring-boot.version>3.5.4</spring-boot.version>
        <jackson.version>2.18.3</jackson.version>

        <rest-assured.version>5.5.6</rest-assured.version>
        <kotlinx-serialization-json.version>1.8.0</kotlinx-serialization-json.version>
        <aspectj.version>1.9.22.1</aspectj.version>
        <selenide.version>7.9.4</selenide.version>
        <allure.version>2.29.0</allure.version>
        <allure.report.version>2.34.1</allure.report.version>
        <allure-maven.version>2.15.2</allure-maven.version>

        <apache-commons-lang.version>3.18.0</apache-commons-lang.version>
        <apache-commons-collections.version>4.5.0</apache-commons-collections.version>
        <apache-commons-text.version>1.14.0</apache-commons-text.version>
        <apache-commons-compress.version>1.28.0</apache-commons-compress.version>

        <kotlin-logger-jvm-slf4j.version>7.0.7</kotlin-logger-jvm-slf4j.version>

        <maven-compiler-plugin.version>3.13.0</maven-compiler-plugin.version>
        <maven-surefire-plugin.version>3.5.3</maven-surefire-plugin.version>
        <maven-failsafe-plugin.version>3.5.3</maven-failsafe-plugin.version>
        <maven-toolchains-plugin.version>3.2.0</maven-toolchains-plugin.version>
        <maven-ant-run.version>3.1.0</maven-ant-run.version>
        <maven-resources-plugin.version>3.3.1</maven-resources-plugin.version>
        <byte-buddy-agent.version>1.17.5</byte-buddy-agent.version>

        <maven-source-plugin.version>3.3.1</maven-source-plugin.version>
        <dokka-maven-plugin.version>2.0.0</dokka-maven-plugin.version>
        <maven-javadoc-plugin.version>3.11.3</maven-javadoc-plugin.version>
        <maven-gpg-plugin.version>3.2.8</maven-gpg-plugin.version>
        <central-publishing-maven-plugin.version>0.8.0</central-publishing-maven-plugin.version>

        <!-- Shared report/artifact directories -->
        <allure.results.dir>${project.build.directory}/allure-results</allure.results.dir>
        <allure.report.dir>${project.build.directory}/allure-reports</allure.report.dir>
        <allure.home.dir>${project.build.directory}/.allure</allure.home.dir>
        <selenide.reports.dir>${project.build.directory}/selenide-reports</selenide.reports.dir>
        <selenide.downloads.dir>${project.build.directory}/downloads</selenide.downloads.dir>
        <selenide.headless>true</selenide.headless>
        <allure.reports.enabled>false</allure.reports.enabled>
    </properties>


    <dependencyManagement>
        <dependencies>

            <!-- ALl Things SPRING -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- JUNIT - JUPITER -->
            <dependency>
                <groupId>org.junit</groupId>
                <artifactId>junit-bom</artifactId>
                <version>${junit.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>


            <!-- KOTLIN -->
            <dependency>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-reflect</artifactId>
                <version>${kotlin.version}</version>
            </dependency>
            <dependency>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-stdlib</artifactId>
                <version>${kotlin.version}</version>
            </dependency>
            <dependency>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-test-junit5</artifactId>
                <version>${kotlin.version}</version>
            </dependency>

            <!-- JACKSON DATABIND -->
            <dependency>
                <groupId>com.fasterxml.jackson</groupId>
                <artifactId>jackson-bom</artifactId>
                <version>${jackson.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- APACHE COMMONS UTILS -->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${apache-commons-lang.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-collections4</artifactId>
                <version>${apache-commons-collections.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-text</artifactId>
                <version>${apache-commons-text.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-compress</artifactId>
                <version>${apache-commons-compress.version}</version>
            </dependency>

            <!-- ALLURE -->
            <dependency>
                <groupId>io.qameta.allure</groupId>
                <artifactId>allure-junit5</artifactId>
                <version>${allure.version}</version>
            </dependency>

            <!-- Compile against Allure API without enabling runtime reporting by default -->
            <dependency>
                <groupId>io.qameta.allure</groupId>
                <artifactId>allure-java-commons</artifactId>
                <version>${allure.version}</version>
            </dependency>

            <!-- REST Assured -->
            <dependency>
                <groupId>io.rest-assured</groupId>
                <artifactId>rest-assured</artifactId>
                <version>${rest-assured.version}</version>
            </dependency>
            <dependency>
                <groupId>org.jetbrains.kotlinx</groupId>
                <artifactId>kotlinx-serialization-json-jvm</artifactId>
                <version>${kotlinx-serialization-json.version}</version>
            </dependency>

            <!-- SELENIDE -->
            <dependency>
                <groupId>com.codeborne</groupId>
                <artifactId>selenide</artifactId>
                <version>${selenide.version}</version>
            </dependency>
            <dependency>
                <groupId>io.qameta.allure</groupId>
                <artifactId>allure-selenide</artifactId>
                <version>${allure.version}</version>
            </dependency>

            <!-- Kotlin Logging ( Kotlin wrapper for SLF4J ) -->
            <dependency>
                <groupId>io.github.oshai</groupId>
                <artifactId>kotlin-logging-jvm</artifactId>
                <version>${kotlin-logger-jvm-slf4j.version}</version>
            </dependency>

            <!-- MOCKITO Inline Warning Agent -->
            <dependency>
                <groupId>net.bytebuddy</groupId>
                <artifactId>byte-buddy-agent</artifactId>
                <version>${byte-buddy-agent.version}</version>
            </dependency>

            <!-- QA BASE Custom Libraries -->
            <dependency>
                <groupId>io.github.toobprojects</groupId>
                <artifactId>qabase-core</artifactId>
                <version>1.4.1</version>
            </dependency>
            <dependency>
                <groupId>io.github.toobprojects</groupId>
                <artifactId>qabase-rest</artifactId>
                <version>1.4.1</version>
            </dependency>
            <dependency>
                <groupId>io.github.toobprojects</groupId>
                <artifactId>qabase-web-ui</artifactId>
                <version>1.4.1</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>

        <!--
        Configures the build settings for the Framework Project.
        It tells maven that :
            •	Main source code is located in src/main/kotlin (instead of the default src/main/java).
            •	Test source code is located in src/test/kotlin.
        -->
<!--        <sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>-->
<!--        <testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>-->

        <plugins>
            <plugin>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-maven-plugin</artifactId>
                <version>${kotlin.version}</version>
                <executions>
                    <execution>
                        <id>compile</id>
                        <phase>compile</phase>
                        <goals><goal>compile</goal></goals>
                        <configuration>
                            <jvmTarget>${kotlin.jvm.target}</jvmTarget>
                            <compilerPlugins>
                                <plugin>spring</plugin>
                                <plugin>all-open</plugin>
                            </compilerPlugins>
                            <pluginOptions>
                                <option>all-open:annotation=org.springframework.stereotype.Component</option>
                                <option>all-open:annotation=org.springframework.boot.test.context.SpringBootTest</option>
                                <option>all-open:annotation=com.toob.qabase.QaBaseTest</option>
                                <option>all-open:annotation=com.toob.qabase.QaBaseAutomationModule</option>
                                <option>all-open:annotation=io.qameta.allure.Step</option>
                            </pluginOptions>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-compile</id>
                        <phase>test-compile</phase>
                        <goals><goal>test-compile</goal></goals>
                        <configuration>
                            <jvmTarget>${kotlin.jvm.target}</jvmTarget>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <args><arg>${kotlin.freeCompilerArgs}</arg></args>
                    <languageVersion>${kotlin.language.version}</languageVersion>
                    <apiVersion>${kotlin.api.version}</apiVersion>
                    <compilerPlugins>
                        <plugin>spring</plugin>
                        <plugin>kotlinx-serialization</plugin>
                    </compilerPlugins>
                    <annotationProcessorPaths>
                        <annotationProcessorPath>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-configuration-processor</artifactId>
                            <version>${spring-boot.version}</version>
                        </annotationProcessorPath>
                    </annotationProcessorPaths>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.jetbrains.kotlin</groupId>
                        <artifactId>kotlin-maven-allopen</artifactId>
                        <version>${kotlin.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.jetbrains.kotlin</groupId>
                        <artifactId>kotlin-maven-serialization</artifactId>
                        <version>${kotlin.version}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <!--
                Maven Compiler Plugin
                •	Compiles Java/Kotlin code with Java 17.
                •	Configures Spring Boot’s annotation processor for configuration properties.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <release>${java.version}</release>
                </configuration>
            </plugin>

            <!--
                Maven Surefire Plugin with Allure
                •	Enables AspectJ weaving (needed for AOP or libraries like Selenide).
                •	Configures Allure for reporting test results.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <!-- Jigsaw off for JUnit platform on mixed builds -->
                    <useModulePath>false</useModulePath>

                    <!-- Limit discovery to Jupiter engines -->
                    <dependenciesToScan>
                        <dependency>org.junit.jupiter</dependency>
                    </dependenciesToScan>

                    <!-- 2) Pass properties to JUnit as SYSTEM PROPERTIES -->
                    <systemPropertyVariables>
                        <junit.jupiter.execution.parallel.enabled>
                            ${qabase.junit.parallel.enabled}
                        </junit.jupiter.execution.parallel.enabled>
                        <junit.jupiter.testinstance.lifecycle.default>
                            ${qabase.junit.lifecycle}
                        </junit.jupiter.testinstance.lifecycle.default>
                        <junit.jupiter.extensions.autodetection.enabled>
                            ${qabase.junit.extensions.autodetection.enabled}
                        </junit.jupiter.extensions.autodetection.enabled>
                        <allure.results.directory>${allure.results.dir}</allure.results.directory>
                        <selenide.reportsFolder>${selenide.reports.dir}</selenide.reportsFolder>
                        <selenide.downloadsFolder>${selenide.downloads.dir}</selenide.downloadsFolder>
                        <selenide.headless>${selenide.headless}</selenide.headless>
                    </systemPropertyVariables>

                    <argLine>
                        -javaagent:"${settings.localRepository}/org/aspectj/aspectjweaver/${aspectj.version}/aspectjweaver-${aspectj.version}.jar"

                        <!--
                            Mockito is currently self-attaching to enable the inline-mock-maker.
                            This will no longer work in future releases of the JDK.
                            Please add Mockito as an agent to your build what is described in Mockito's documentation
                        -->
                        -javaagent:"${settings.localRepository}/net/bytebuddy/byte-buddy-agent/${byte-buddy-agent.version}/byte-buddy-agent-${byte-buddy-agent.version}.jar"
                    </argLine>
                    <printSummary>true</printSummary>
                    <reportFormat>brief</reportFormat>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.aspectj</groupId>
                        <artifactId>aspectjweaver</artifactId>
                        <version>${aspectj.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>net.bytebuddy</groupId>
                        <artifactId>byte-buddy-agent</artifactId>
                        <version>${byte-buddy-agent.version}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <!-- Failsafe for integration tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${maven-failsafe-plugin.version}</version>
                <configuration>
                    <!-- Jigsaw off for JUnit platform on mixed builds -->
                    <useModulePath>false</useModulePath>

                    <!-- Limit discovery to Jupiter engines -->
                    <dependenciesToScan>
                        <dependency>org.junit.jupiter</dependency>
                    </dependenciesToScan>

                    <!-- Keep ITs in sync -->
                    <systemPropertyVariables>
                        <junit.jupiter.execution.parallel.enabled>
                            ${qabase.junit.parallel.enabled}
                        </junit.jupiter.execution.parallel.enabled>
                        <junit.jupiter.testinstance.lifecycle.default>
                            ${qabase.junit.lifecycle}
                        </junit.jupiter.testinstance.lifecycle.default>
                        <junit.jupiter.extensions.autodetection.enabled>
                            ${qabase.junit.extensions.autodetection.enabled}
                        </junit.jupiter.extensions.autodetection.enabled>
                        <allure.results.directory>${allure.results.dir}</allure.results.directory>
                        <selenide.reportsFolder>${selenide.reports.dir}</selenide.reportsFolder>
                        <selenide.downloadsFolder>${selenide.downloads.dir}</selenide.downloadsFolder>
                        <selenide.headless>${selenide.headless}</selenide.headless>
                    </systemPropertyVariables>

                    <!-- Adjust patterns if you use different IT naming -->
                    <includes>
                        <include>**/*IT.java</include>
                        <include>**/*ITCase.java</include>
                    </includes>
                    <argLine>
                        -javaagent:"${settings.localRepository}/org/aspectj/aspectjweaver/${aspectj.version}/aspectjweaver-${aspectj.version}.jar"
                        -javaagent:"${settings.localRepository}/net/bytebuddy/byte-buddy-agent/${byte-buddy-agent.version}/byte-buddy-agent-${byte-buddy-agent.version}.jar"
                    </argLine>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>


    <profiles>

        <!--
            Generate Allure HTML report ONLY when explicitly enabled.

            Usage options:
              # Option 1: activate by profile id
              mvn clean verify -Pallure-reports

              # Option 2: activate by property (no -P needed)
              mvn clean verify -Dallure.reports=true

            Notes:
              - Do NOT run on default `mvn clean install`.
              - Test frameworks produce results during test phases; this profile only builds the HTML report from ${allure.results.dir} into ${allure.report.dir}.
        -->
        <!--
          KEEP PARENT CLEAN (library-free parent/BOM)
          Why:
            • This profile helps guard the parent POM, without affecting consumer report runs.
          How it works:
            • activeByDefault=true -> runs on normal builds (mvn clean verify).
            • When you run other profiles explicitly (e.g. -Pallure-reports), this profile is not active
              unless you list it; that avoids conflicts with test-scoped deps used for reporting.
          Tip:
            • If you ever wonder why this exists: it prevents accidental <dependencies> at root.
        -->
       <profile>
            <id>allure-reports</id>

            <!-- Activate when explicitly requested -->
            <activation>
                <!-- Property-based activation: -Dallure.reports=true -->
                <property>
                    <name>allure.reports</name>
                    <value>true</value>
                </property>
                <!-- No activeByDefault: stays off for normal builds -->
            </activation>

            <dependencies>
                <dependency>
                    <groupId>io.qameta.allure</groupId>
                    <artifactId>allure-junit5</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>

            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>${maven-surefire-plugin.version}</version>
                        <configuration>
                            <systemPropertyVariables>
                                <allure.results.directory>${allure.results.dir}</allure.results.directory>
                                <!-- This line makes allureEnabled() return true in unit tests -->
                                <allure.reports>true</allure.reports>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${maven-failsafe-plugin.version}</version>
                        <configuration>
                            <systemPropertyVariables>
                                <allure.results.directory>${allure.results.dir}</allure.results.directory>
                                <!-- This line makes allureEnabled() return true in ITs -->
                                <allure.reports>true</allure.reports>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                    <!--
                        Allure Reporting Maven Plugin Generates Allure test reports from test execution data.
                    -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>${maven-resources-plugin.version}</version>
                        <inherited>false</inherited>
                        <executions>
                            <execution>
                                <id>gather-allure-results</id>
                                <phase>verify</phase>
                                <goals><goal>copy-resources</goal></goals>
                                <configuration>
                                    <outputDirectory>${allure.results.dir}</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}</directory>
                                            <includes>
                                                <include>**/target/allure-results/**</include>
                                            </includes>
                                            <filtering>false</filtering>
                                            <optional>true</optional>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>io.qameta.allure</groupId>
                        <artifactId>allure-maven</artifactId>
                        <version>${allure-maven.version}</version>
                        <inherited>false</inherited>
                        <configuration>
                          <reportVersion>${allure.report.version}</reportVersion>
                          <resultsDirectory>${allure.results.dir}</resultsDirectory>
                          <reportDirectory>${allure.report.dir}</reportDirectory>
                        </configuration>
                        <executions>
                            <execution>
                                <id>allure-generate</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>report</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>


        <!-- Release profile: only signs artifacts when explicitly enabled -->
        <profile>
            <id>release</id>
            <build>
                <plugins>

                    <!-- Packages and attaches a *-sources.jar for every module.
                        Required by Maven Central so consumers can browse source.
                        Runs at the `verify` phase using `jar-no-fork` to avoid re-invoking the build. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <version>${maven-source-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>attach-sources</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>jar-no-fork</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Standard Java Javadoc packaging: attaches *-javadoc.jar.
                         Complements Dokka for any Java bits or mixed modules.
                         `failOnError=false` prevents doc lint from failing releases early on. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <version>${maven-javadoc-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>attach-javadocs</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <!-- Keep it resilient while you flesh out docs -->
                            <failOnError>false</failOnError>
                        </configuration>
                    </plugin>

                    <!-- Generates a Javadoc-style *-javadoc.jar for Kotlin via Dokka.
                        Satisfies Central's javadoc requirement for Kotlin code.
                        Bound to `package` with the `javadocJar` goal; `failOnWarning=false` keeps builds resilient. -->
                    <plugin>
                        <groupId>org.jetbrains.dokka</groupId>
                        <artifactId>dokka-maven-plugin</artifactId>
                        <version>${dokka-maven-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>dokka-javadoc-jar</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>javadocJar</goal>
                                </goals>
                                <configuration>
                                    <failOnWarning>false</failOnWarning>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Cryptographically signs all artifacts (*.asc) at `verify`.
                Mandatory for Central to verify provenance.
                pinentry-mode loopback` enables non-interactive signing in CI. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <version>${maven-gpg-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                                <configuration>
                                    <!-- Needed for CI/non-interactive environments -->
                                    <gpgArguments>
                                        <arg>--pinentry-mode</arg>
                                        <arg>loopback</arg>
                                    </gpgArguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!--
                    Publishes to Sonatype Central (the successor to Nexus Staging).
                        `extensions=true` wires it into Maven's lifecycle.
                        `publishingServerId` must match credentials in ~/.m2/settings.xml.
                    -->
                    <plugin>
                        <groupId>org.sonatype.central</groupId>
                        <artifactId>central-publishing-maven-plugin</artifactId>
                        <version>${central-publishing-maven-plugin.version}</version>
                        <extensions>true</extensions>
                        <configuration>
                            <publishingServerId>central</publishingServerId>
                            <!-- <autoPublish>true</autoPublish> -->
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
