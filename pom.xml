<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.github.toobprojects</groupId>
    <artifactId>qabase-framework</artifactId>
    <version>1.0.5-SNAPSHOT</version>
    <packaging>pom</packaging>
    <name>QABase Framework [POM]</name>
    <description>
        QABase is a lightweight, modular JVM automation testing framework (JUnit 5 + Allure, RestAssured, Selenide) for rapid, standardized QA setups.
    </description>
    <url>https://github.com/toobprojects/qabase-framework</url>

    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <url>https://www.apache.org/licenses/LICENSE-2.0</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <scm>
        <url>https://github.com/toobprojects/qabase-framework</url>
        <connection>scm:git:https://github.com/toobprojects/qabase-framework.git</connection>
        <developerConnection>scm:git:ssh://git@github.com/toobprojects/qabase-framework.git</developerConnection>
        <tag>HEAD</tag>
    </scm>

    <developers>
        <developer>
            <id>thabo</id>
            <name>Thabo Matjuda</name>
            <url>https://github.com/toobprojects</url>
        </developer>
    </developers>

    <modules>
        <module>qabase-core</module>
        <module>qabase-rest</module>
        <module>qabase-web-ui</module>
    </modules>


    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <kotlin.version>2.1.20</kotlin.version>
        <java.version>17</java.version>
        <kotlin.compiler.jvmTarget>17</kotlin.compiler.jvmTarget>
        <spring-boot.version>3.5.4</spring-boot.version>
        <jackson-databind.version>2.18.3</jackson-databind.version>

        <rest-assured.version>5.5.6</rest-assured.version>
        <kotlinx-serialization-json.version>1.8.0</kotlinx-serialization-json.version>
        <allure.version>2.29.1</allure.version>
        <aspectj.version>1.9.22.1</aspectj.version>
        <selenide.version>7.9.4</selenide.version>

        <apache-commons-lang.version>3.18.0</apache-commons-lang.version>
        <apache-commons-collection.version>4.5.0</apache-commons-collection.version>
        <apache-commons-text.version>1.14.0</apache-commons-text.version>
        <apache-commons-compression.version>1.28.0</apache-commons-compression.version>

        <kotlin-logger-jvm-slf4j.version>7.0.7</kotlin-logger-jvm-slf4j.version>

        <maven-compiler-plugin.version>3.13.0</maven-compiler-plugin.version>
        <maven-surefire-plugin.version>3.2.2</maven-surefire-plugin.version>
        <maven-failsafe-plugin.version>3.5.3</maven-failsafe-plugin.version>
        <byte-buddy-agent.version>1.17.5</byte-buddy-agent.version>
        <maven-ant-run.version>3.1.0</maven-ant-run.version>
        <allure-maven.version>2.29.1</allure-maven.version>

        <maven-source-plugin.version>3.3.1</maven-source-plugin.version>
        <dokka-maven-plugin.version>2.0.0</dokka-maven-plugin.version>
        <maven-javadoc-plugin.version>3.11.3</maven-javadoc-plugin.version>
        <maven-gpg-plugin.version>3.2.8</maven-gpg-plugin.version>
        <central-publishing-maven-plugin.version>0.8.0</central-publishing-maven-plugin.version>
    </properties>


    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- JACKSON DATABIND -->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson-databind.version}</version>
            </dependency>

            <!-- APACHE COMMONS UTILS -->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${apache-commons-lang.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-collections4</artifactId>
                <version>${apache-commons-collection.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-text</artifactId>
                <version>${apache-commons-text.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-compress</artifactId>
                <version>${apache-commons-compression.version}</version>
            </dependency>

            <!-- ALLURE -->
            <dependency>
                <groupId>io.qameta.allure</groupId>
                <artifactId>allure-junit5</artifactId>
                <version>${allure-maven.version}</version>
            </dependency>

            <!-- REST Assured -->
            <dependency>
                <groupId>io.rest-assured</groupId>
                <artifactId>rest-assured</artifactId>
                <version>${rest-assured.version}</version>
            </dependency>
            <dependency>
                <groupId>org.jetbrains.kotlinx</groupId>
                <artifactId>kotlinx-serialization-json-jvm</artifactId>
                <version>${kotlinx-serialization-json.version}</version>
            </dependency>

            <!-- SELENIDE -->
            <dependency>
                <groupId>com.codeborne</groupId>
                <artifactId>selenide</artifactId>
                <version>${selenide.version}</version>
            </dependency>
            <dependency>
                <groupId>io.qameta.allure</groupId>
                <artifactId>allure-selenide</artifactId>
                <version>${allure.version}</version>
            </dependency>

            <!-- Kotlin Logging ( Kotlin wrapper for SLF4J ) -->
            <dependency>
                <groupId>io.github.oshai</groupId>
                <artifactId>kotlin-logging-jvm</artifactId>
                <version>${kotlin-logger-jvm-slf4j.version}</version>
            </dependency>

            <!-- MOCKITO Inline Warning Agent -->
            <dependency>
                <groupId>net.bytebuddy</groupId>
                <artifactId>byte-buddy-agent</artifactId>
                <version>${byte-buddy-agent.version}</version>
            </dependency>

            <!-- QA BASE Custom Libraries -->
            <dependency>
                <groupId>io.github.toobprojects</groupId>
                <artifactId>qabase-core</artifactId>
                <version>1.0.5-SNAPSHOT</version>
            </dependency>
            <dependency>
                <groupId>io.github.toobprojects</groupId>
                <artifactId>qabase-rest</artifactId>
                <version>1.0.5-SNAPSHOT</version>
            </dependency>
            <dependency>
                <groupId>io.github.toobprojects</groupId>
                <artifactId>qabase-web-ui</artifactId>
                <version>1.0.5-SNAPSHOT</version>
            </dependency>
        </dependencies>
    </dependencyManagement>


    <dependencies>

        <!-- SPRING BOOT & FRAMEWORK STUFF -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>


        <!-- KOTLIN -->
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-reflect</artifactId>
            <version>${kotlin.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-stdlib</artifactId>
            <version>${kotlin.version}</version>
        </dependency>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-test-junit5</artifactId>
            <version>${kotlin.version}</version>
        </dependency>

        <!-- ALLURE -->
        <dependency>
            <groupId>io.qameta.allure</groupId>
            <artifactId>allure-junit5</artifactId>
        </dependency>
    </dependencies>


    <build>

        <!--
        Configures the build settings for the Framework Project.
        It tells maven that :
            •	Main source code is located in src/main/kotlin (instead of the default src/main/java).
            •	Test source code is located in src/test/kotlin.
        -->
        <sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>
        <testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>

        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot.version}</version>
            </plugin>


            <!--
            This plugin ensures Kotlin code is compiled correctly during the build process.
                •	Compiles Kotlin code for both main and test phases.
                •	Targets JVM 17 (since we specified <java.version>17</java.version>).
            -->
            <plugin>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-maven-plugin</artifactId>
                <version>${kotlin.version}</version>
                <executions>
                    <execution>
                        <id>compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <configuration>
                            <jvmTarget>${java.version}</jvmTarget>
                            <compilerPlugins>
                                <plugin>spring</plugin>
                                <plugin>all-open</plugin>
                            </compilerPlugins>
                            <pluginOptions>
                                <option>all-open:annotation=org.springframework.stereotype.Component</option>
                                <option>all-open:annotation=org.springframework.boot.test.context.SpringBootTest</option>
                                <option>all-open:annotation=com.toob.qabase.QaBaseTest</option>
                                <option>all-open:annotation=com.toob.qabase.QaBaseAutomationModule</option>
                                <option>all-open:annotation=io.qameta.allure.Step</option>
                            </pluginOptions>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-compile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>test-compile</goal>
                        </goals>
                        <configuration>
                            <jvmTarget>${java.version}</jvmTarget>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <args>
                        <arg>-Xjsr305=strict</arg>
                    </args>

                    <!--
                    Enables Kotlin compiler plugins:
                        •	spring – Enables Spring support in Kotlin.
                        •	kotlinx-serialization – Enables JSON serialization support in Kotlin.
                    -->
                    <compilerPlugins>
                        <plugin>spring</plugin>
                        <plugin>kotlinx-serialization</plugin>
                    </compilerPlugins>
                    <annotationProcessorPaths>
                        <annotationProcessorPath>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-configuration-processor</artifactId>
                            <version>${spring-boot.version}</version>
                        </annotationProcessorPath>
                    </annotationProcessorPaths>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.jetbrains.kotlin</groupId>
                        <artifactId>kotlin-maven-allopen</artifactId>
                        <version>${kotlin.version}</version>
                    </dependency>
                    <!-- Add this dependency for serialization -->
                    <dependency>
                        <groupId>org.jetbrains.kotlin</groupId>
                        <artifactId>kotlin-maven-serialization</artifactId>
                        <version>${kotlin.version}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <!--
            Maven Compiler Plugin
                •	Compiles Java/Kotlin code with Java 17.
                •	Configures Spring Boot’s annotation processor for configuration properties.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <release>${java.version}</release>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-configuration-processor</artifactId>
                            <version>${spring-boot.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>

            <!--
            Maven Surefire Plugin with Allure
                •	Enables AspectJ weaving (needed for AOP or libraries like Selenide).
                •	Configures Allure for reporting test results.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <argLine>
                        -javaagent:"${settings.localRepository}/org/aspectj/aspectjweaver/${aspectj.version}/aspectjweaver-${aspectj.version}.jar"

                        <!-- Mockito is currently self-attaching to enable the inline-mock-maker.
                            This will no longer work in future releases of the JDK.
                            Please add Mockito as an agent to your build what is described in Mockito's documentation
                        -->
                        -javaagent:"${settings.localRepository}/net/bytebuddy/byte-buddy-agent/${byte-buddy-agent.version}/byte-buddy-agent-${byte-buddy-agent.version}.jar"
                    </argLine>
                    <useModulePath>false</useModulePath>
                    <printSummary>true</printSummary>
                    <reportFormat>brief</reportFormat>
                    <systemProperties>
                        <property>
                            <name>allure.results.directory</name>
                            <value>${project.build.directory}/allure-results</value>
                        </property>
                        <!-- Enable Selenide Headless Mode -->
                        <property>
                            <name>selenide.headless</name>
                            <value>true</value>
                        </property>
                    </systemProperties>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.aspectj</groupId>
                        <artifactId>aspectjweaver</artifactId>
                        <version>${aspectj.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>net.bytebuddy</groupId>
                        <artifactId>byte-buddy-agent</artifactId>
                        <version>${byte-buddy-agent.version}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <!-- Failsafe for integration tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${maven-failsafe-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!--
            Allure Reporting Maven Plugin
                •	Generates Allure test reports from test execution data.
            -->
            <plugin>
                <groupId>io.qameta.allure</groupId>
                <artifactId>allure-maven</artifactId>
                <version>2.15.2</version>
                <configuration>
                    <reportVersion>${allure.version}</reportVersion>
                    <resultsDirectory>${project.build.directory}/allure-results</resultsDirectory>
                    <reportDirectory>${project.build.directory}/allure-reports</reportDirectory>
                </configuration>
            </plugin>

            <!--
            Maven Ant Run Plugin
                • Creates Required Directories for Allure Reports
                • Ensures Allure directories exist before running tests.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>${maven-ant-run.version}</version>
                <executions>
                    <execution>
                        <id>create-allure-results-directory</id>
                        <phase>initialize</phase>
                        <configuration>
                            <target>
                                <mkdir dir="${project.build.directory}/allure-results"/>
                                <mkdir dir="${project.build.directory}/allure-reports"/>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>


        </plugins>
    </build>


    <profiles>
        <!-- Release profile: only signs artifacts when explicitly enabled -->
        <profile>
            <id>release</id>
            <build>
                <plugins>

                    <!-- Packages and attaches a *-sources.jar for every module.
                        Required by Maven Central so consumers can browse source.
                        Runs at the `verify` phase using `jar-no-fork` to avoid re-invoking the build. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <version>${maven-source-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>attach-sources</id>
                                <phase>verify</phase>
                                <goals><goal>jar-no-fork</goal></goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Standard Java Javadoc packaging: attaches *-javadoc.jar.
                         Complements Dokka for any Java bits or mixed modules.
                         `failOnError=false` prevents doc lint from failing releases early on. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <version>${maven-javadoc-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>attach-javadocs</id>
                                <phase>verify</phase>
                                <goals><goal>jar</goal></goals>
                            </execution>
                        </executions>
                        <configuration>
                            <!-- Keep it resilient while you flesh out docs -->
                            <failOnError>false</failOnError>
                        </configuration>
                    </plugin>

                    <!-- Generates a Javadoc-style *-javadoc.jar for Kotlin via Dokka.
                        Satisfies Central's javadoc requirement for Kotlin code.
                        Bound to `package` with the `javadocJar` goal; `failOnWarning=false` keeps builds resilient. -->
                    <plugin>
                        <groupId>org.jetbrains.dokka</groupId>
                        <artifactId>dokka-maven-plugin</artifactId>
                        <version>${dokka-maven-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>dokka-javadoc-jar</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>javadocJar</goal>
                                </goals>
                                <configuration>
                                    <failOnWarning>false</failOnWarning>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Cryptographically signs all artifacts (*.asc) at `verify`.
                Mandatory for Central to verify provenance.
                pinentry-mode loopback` enables non-interactive signing in CI. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <version>${maven-gpg-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals><goal>sign</goal></goals>
                                <configuration>
                                    <!-- Needed for CI/non-interactive environments -->
                                    <gpgArguments>
                                        <arg>--pinentry-mode</arg>
                                        <arg>loopback</arg>
                                    </gpgArguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Publishes to Sonatype Central (the successor to Nexus Staging).
                 `extensions=true` wires it into Maven's lifecycle.
                 `publishingServerId` must match credentials in ~/.m2/settings.xml. -->
                    <plugin>
                        <groupId>org.sonatype.central</groupId>
                        <artifactId>central-publishing-maven-plugin</artifactId>
                        <version>${central-publishing-maven-plugin.version}</version>
                        <extensions>true</extensions>
                        <configuration>
                            <publishingServerId>central</publishingServerId>
                            <!-- <autoPublish>true</autoPublish> -->
                        </configuration>
                    </plugin>

                </plugins>
            </build>
        </profile>
    </profiles>
</project>
